{"version":3,"sources":["assets/logo.svg","utils/serviceWorker.js","components/Nav.jsx","components/Main.jsx","App.jsx","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Navigation","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","react_default","a","createElement","reactstrap_es","color","dark","expand","href","className","alt","src","logo","localStorage","ALLSTARS_USERNAME","Fragment","onClick","e","preventDefault","handleToggle","navbar","nav","inNavbar","caret","right","removeItem","handleLogout","Main","components_Nav","id","sm","size","offset","App","HashRouter","Route","path","exact","component","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f4a1195.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.28a22e69.svg\";","/* eslint function-paren-newline:0 */\n/* eslint comma-dangle:0 */\n/* eslint no-undef:0 */\n/* eslint semi:0 */\n/* eslint no-use-before-define:0 */\n/* eslint arrow-parens:0 */\n/* eslint no-param-reassign:0 */\n/* eslint no-console:0 */\n/* eslint immutable/no-mutation:0 */\n/* eslint operator-linebreak:0 */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap'\n\n// styles\nimport '../styles/Nav.css'\n\n// assets\nimport logo from '../assets/logo.svg'\n\nconst Navigation = () => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleToggle = (e) => {\n    e.preventDefault()\n    setIsOpen(!isOpen)\n  }\n\n  const handleLogout = (e) => {\n    e.preventDefault()\n    localStorage.removeItem('ALLSTARS_TOKEN')\n    localStorage.removeItem('ALLSTARS_USERNAME')\n    // const route = '/login'\n    // history.push(route)\n  }\n\n  return (\n    <div>\n      <Navbar color=\"dark\" dark expand=\"md\">\n        <NavbarBrand href=\"/\">\n          <img className=\"App-logo\" alt=\"logo\" src={logo} />\n        </NavbarBrand>\n        <NavbarBrand href=\"/\">allstars</NavbarBrand>\n        { localStorage.ALLSTARS_USERNAME\n          && (<>\n            <NavbarToggler onClick={e => handleToggle(e)} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem className=\"active\">\n                  <NavLink href=\"/\">Discover</NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    {localStorage.ALLSTARS_USERNAME}\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                    <DropdownItem\n                      onClick={\n                        e => handleLogout(e)\n                      }\n                    >\n                      Logout\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </Nav>\n            </Collapse>\n          </>\n          )}\n      </Navbar>\n    </div>\n  )\n}\n\n// Navigation.propTypes = {\n//   history: PropTypes.object.isRequired,\n// }\n\n\nexport default Navigation\n","import React from 'react'\nimport {\n  Jumbotron, Container, Row, Col,\n} from 'reactstrap'\n\n// styles\nimport '../styles/Main.css'\n\n// local components\nimport Nav from './Nav'\n\nconst Main = () => (\n  <>\n    <Nav />\n    <Container id=\"main\">\n      <Row>\n        <Col sm={{ size: 10, offset: 1 }}>\n          <Jumbotron>\n            <h1 className=\"display-3\">Fantasy NBA All-Stars</h1>\n            <p className=\"lead\">Predict the lineups for each team!!!</p>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  </>\n)\n\nexport default Main\n","import React from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\n// bootstrap styles\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n// local components\nimport Main from './components/Main'\n\nconst App = () => (\n  <Router>\n    <>\n      <Route path=\"/\" exact component={Main} />\n    </>\n  </Router>\n)\n\n\nexport default App\n","/* eslint react/jsx-filename-extension: 0 */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n// styles\nimport './styles/index.css'\n\n// service workers\nimport * as serviceWorker from './utils/serviceWorker'\n\n// App\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}